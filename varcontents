jetSubVtxPt    = evtInfo->PtrFloat(var::jetSubVtxPt   )[jetIdx];
jetSubVtxMass  = evtInfo->PtrFloat(var::jetSubVtxMass )[jetIdx];
jetSubVtx3DVal = evtInfo->PtrFloat(var::jetSubVtx3DVal)[jetIdx];
jetSubVtx3DErr = evtInfo->PtrFloat(var::jetSubVtx3DErr)[jetIdx];
jetSubVtxNtrks = evtInfo->PtrInt  (var::jetSubVtxNtrks)[jetIdx];
run     = evtInfo->Int("run");
// puwei = (float) puCalc.GetWeight(run, puTrue[1]); // in-time PU asdf temporaily disabled
event   = evtInfo->Long64("event"); 
isData = evtInfo->Bool("isData");
HLT = evtInfo->Long64("HLTPho");
HLTIsPrescaled  = evtInfo->Long64("HLTPhoIsPrescaled");
// Long64_t HLTelemu = evtInfo->Long64("HLTEleMuX"); 
phoFiredTrgs = evtInfo->PtrLong64(var::phoFiredTrgs)[phoIdx];
    pthat    = evtInfo->Float(var::pthat);
    genHT = evtInfo->Float(var::genHT);
    mcPt = 0.;
    mcPt  = mcPt[k];
    mcPt  = mcMomPt[k];
    mcPt     = mcpt[phoIdx];
    mcEta = 0.;
    mcEta = mcEta[k];
    mcEta = mcMomEta[k];
    mcEta    = mceta[phoIdx];
    mcPhi = 0.;
    mcPhi = mcPhi[k];
    mcPhi = mcMomPhi[k];	      
    mcPhi    = mcphi[phoIdx];
    mcCalIso04 = mcCalIsoDR04[k];
    mcCalIso04 = mcCalIso04[phoIdx];
    mcTrkIso04 = mcTrkIsoDR04[k];
    mcTrkIso04 = mcTrkIsoDR04[k];
    mcTrkIso04 = mcTrkIso04[phoIdx];

recoPt    = evtInfo->PtrFloat(var::phoEt)[phoIdx];
recoEta   = evtInfo->PtrFloat(var::phoEta)[phoIdx];
recoPhi   = evtInfo->PtrFloat(var::phoPhi)[phoIdx];
recoSCEta = evtInfo->PtrFloat(var::phoSCEta)[phoIdx];
r9        = evtInfo->PtrFloat(var::phoR9)[phoIdx];
    isMatched    = -1;
    isMatchedEle = -1;
    isMatched = 1;
    isMatchedEle = 1;
    isMatched = evtInfo->PtrFloat(var::match)[phoIdx];
    isMatchedEle = evtInfo->PtrFloat(var::match_ele)[phoIdx];
    isMatched = 1;
    isMatchedEle = 0;
    isMatchedEle = -1;
    isMatchedEle = 1;
    isMatchedEle = evtInfo->PtrFloat(var::match_ele)[phoIdx];
    isMatchedEle = 0;
    isConverted = -1;
    isConverted = 1;
    isConverted = evtInfo->PtrFloat(var::converted)[phoIdx];
    isConverted = 0;
    idLoose      = -1;
    idMedium     = -1;
    idTight      = -1;
nVtx = evtInfo->Int("nVtx");    
// if (puBX)[i] == 0) nPU = evtInfo->PtrFloat(var::puTrue)[i];
// puwei = 1.;//
// puwei = (float) puCalc.GetWeight(run, puTrue)[1]); // in-time PU
eleVeto   = evtInfo->PtrFloat(var::phoEleVeto)[phoIdx];
HoverE    = evtInfo->PtrFloat(var::phoHoverE)[phoIdx];
phoIsoRaw  = evtInfo->PtrFloat(var::phoPFPhoIso)[phoIdx];
tp_nhIso)[ii] = evtInfo->PtrFloat(var::new TProfile(txt,txt, 100, 0., 100.);
tp_nhIso_rho)[ii] = evtInfo->PtrFloat(var::new TProfile(txt,txt, 100, 0., 100.);
chIsoRaw   = evtInfo->PtrFloat(var::phoPFChIso)[phoIdx];
chWorstIso = evtInfo->PtrFloat(var::phoPFChWorstIso)[phoIdx];
nhIsoRaw   = evtInfo->PtrFloat(var::phoPFNeuIso)[phoIdx];
rho                 = evtInfo->Float("rho");
e2x2Full5x5       = evtInfo->PtrFloat(var::phoE2x2Full5x5)[phoIdx];
e5x5Full5x5       = evtInfo->PtrFloat(var::phoE5x5Full5x5)[phoIdx];
rawE       = evtInfo->PtrFloat(var::phoSCRawE)[phoIdx];
scEtaWidth = evtInfo->PtrFloat(var::phoSCEtaWidth)[phoIdx];
scPhiWidth = evtInfo->PtrFloat(var::phoSCPhiWidth)[phoIdx];
esRR       = evtInfo->PtrFloat(var::phoESEffSigmaRR)[phoIdx];
esEn       = evtInfo->PtrFloat(var::phoESEnP1)[phoIdx] +evtInfo->PtrFloat(var::phoESEnP2)[phoIdx];
mva = select_photon_mvanoIso(data, phoIdx, tgr);
photonIDmva = evtInfo->PtrFloat(var::phoIDMVA)[phoIdx];
phoIDbit = evtInfo->PtrFloat(var::phoIDbit)[phoIdx];

MET = evtInfo->Float(var::pfMET);
METPhi = evtInfo->Float(var::pfMETPhi);
metFilters = evtInfo->Int("metFilters");
phohasPixelSeed = evtInfo->PtrFloat(var::phohasPixelSeed)[phoIdx];
// MTm = mt;
// MTe = mt;
// deta_wg = evtInfo->PtrFloat(var::lepP4)[0].Eta() - phoEta)[phoIdx];
// dphi_wg = evtInfo->PtrFloat(var::deltaPhi(lepP4)[0].Phi(), phoPhi)[phoIdx]);
sieieFull5x5     = evtInfo->PtrFloat(var::phoSigmaIEtaIEtaFull5x5)[phoIdx];
sieipFull5x5     = evtInfo->PtrFloat(var::phoSigmaIEtaIPhiFull5x5)[phoIdx];
sipipFull5x5     = evtInfo->PtrFloat(var::phoSigmaIPhiIPhiFull5x5)[phoIdx];
r9Full5x5        = evtInfo->PtrFloat(var::phoR9Full5x5)[phoIdx];
jetPt = evtInfo->PtrFloat(var::jetPt)[jet_index];
jetEta = evtInfo->PtrFloat(var::jetEta)[jet_index];
jetPhi = evtInfo->PtrFloat(var::jetPhi)[jet_index];
//  // jetY = jetP4.Rapidity();
jetJECUnc = evtInfo->PtrFloat(var::jetJECUnc)[jet_index];
    jetGenJetPt = evtInfo->PtrFloat(var::jetGenJetPt)[jet_index];
    jetGenJetEta = evtInfo->PtrFloat(var::jetGenJetEta)[jet_index];
    jetGenJetPhi = evtInfo->PtrFloat(var::jetGenJetPhi)[jet_index];
    jetGenJetY = jetGenJetP4.Rapidity();
jetCSV2BJetTags = evtInfo->PtrFloat(var::jetCSV2BJetTags)[jet_index];
jetDeepCSVTags_b = evtInfo->PtrFloat(var::jetDeepCSVTags_b)[jet_index];
jetDeepCSVTags_bb = evtInfo->PtrFloat(var::jetDeepCSVTags_bb)[jet_index];
jetDeepCSVTags_c = evtInfo->PtrFloat(var::jetDeepCSVTags_c)[jet_index];
jetDeepCSVTags_udsg = evtInfo->PtrFloat(var::jetDeepCSVTags_udsg)[jet_index];
jetPartonID = evtInfo->PtrFloat(var::jetPartonID)[jet_index];
    jetGenPartonID = evtInfo->PtrFloat(var::jetGenPartonID)[jet_index];		
jetHadFlvr = evtInfo->PtrFloat(var::jetHadFlvr)[jet_index];
photon_jetID = evtInfo->PtrFloat(var::photon_jetID)[ii];
SeedEnergy = evtInfo->PtrFloat(var::phoSeedEnergy)[phoIdx];
